/*  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
/   ‚ïë üçù  Generated by Pastapi  üçù ‚ïë
/   ‚ïë        Do not modify.        ‚ïë
/   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
/   
*/

import { z } from "zod";
import axios, { AxiosRequestConfig, AxiosInstance, AxiosResponse } from "axios";

export namespace GetUser {
  export const requestBodySchemas = {};
  export type RequestBody = {};

  export const responseSchemasOk = [
    {
      statusCode: "200",
      contentType: "application/json",
      bodySchema: z.object({ id: z.number().int(), name: z.string() }),
      headerSchema: z.never(),
    },
  ];

  export const responseSchemasError = [];

  export const responseSchemas = [
    ...responseSchemasOk,
    ...responseSchemasError,
  ];

  export type ResponseBodyOk = z.infer<
    (typeof responseSchemasOk)[number]["bodySchema"]
  >;
  export type ResponseBodyError = z.infer<
    (typeof responseSchemasError)[number]["bodySchema"]
  >;
  export type ResponseBody = z.infer<
    (typeof responseSchemas)[number]["bodySchema"]
  >;

  export const requestParamSchemas = {};

  export type Variables = RequestBody & OptionalUndefined<{}>;

  export const request = async <REQ_B = RequestBody, RES_B = ResponseBody>(
    axiosInstance: AxiosInstance,
    vars: Variables,
    config?: AxiosRequestConfig<undefined>,
  ) =>
    axiosInstance.request<REQ_B, AxiosResponse<RES_B, REQ_B>>({
      method: "get",
      url: `/user`,
      headers: {},
      params: {},

      ...config,
    });

  export type AxiosConfig = AxiosRequestConfig<undefined>;

  export const requestSafe = async <
    REQ_B = RequestBody,
    RES_B_OK = ResponseBodyOk,
    RES_B_ERROR = ResponseBodyError,
  >(
    axiosInstance: AxiosInstance,
    vars: Variables,
    config?: AxiosConfig,
  ) =>
    safeifyRequest<REQ_B, RES_B_OK, RES_B_ERROR>(
      axiosInstance,
      vars,
      config,
      request,
    );
}

export namespace PostUser {
  export const requestBodySchemas = {
    "application/json": z.object({ id: z.number().int(), name: z.string() }),
  };
  export type RequestBody = {
    contentType: "application/json";
    body: z.infer<(typeof requestBodySchemas)["application/json"]>;
  };

  export const responseSchemasOk = [
    {
      statusCode: "200",
      contentType: "text/plain",
      bodySchema: z.string(),
      headerSchema: z.never(),
    },
  ];

  export const responseSchemasError = [];

  export const responseSchemas = [
    ...responseSchemasOk,
    ...responseSchemasError,
  ];

  export type ResponseBodyOk = z.infer<
    (typeof responseSchemasOk)[number]["bodySchema"]
  >;
  export type ResponseBodyError = z.infer<
    (typeof responseSchemasError)[number]["bodySchema"]
  >;
  export type ResponseBody = z.infer<
    (typeof responseSchemas)[number]["bodySchema"]
  >;

  export const requestParamSchemas = {};

  export type Variables = RequestBody & OptionalUndefined<{}>;

  export const request = async <REQ_B = RequestBody, RES_B = ResponseBody>(
    axiosInstance: AxiosInstance,
    vars: Variables,
    config?: AxiosRequestConfig<Pick<RequestBody, "body">>,
  ) =>
    axiosInstance.request<REQ_B, AxiosResponse<RES_B, REQ_B>>({
      method: "post",
      url: `/user`,
      headers: {
        "Content-Type": "application/json",
      },
      params: {},
      data: requestBodySchemas[vars.contentType].parse(vars.body, {
        path: ["request", "body"],
      }),
      ...config,
    });

  export type AxiosConfig = AxiosRequestConfig<Pick<RequestBody, "body">>;

  export const requestSafe = async <
    REQ_B = RequestBody,
    RES_B_OK = ResponseBodyOk,
    RES_B_ERROR = ResponseBodyError,
  >(
    axiosInstance: AxiosInstance,
    vars: Variables,
    config?: AxiosConfig,
  ) =>
    safeifyRequest<REQ_B, RES_B_OK, RES_B_ERROR>(
      axiosInstance,
      vars,
      config,
      request,
    );
}

export namespace GetUserId {
  export const requestBodySchemas = {};
  export type RequestBody = {};

  export const responseSchemasOk = [
    {
      statusCode: "200",
      contentType: "application/json",
      bodySchema: z.object({ id: z.number().int(), name: z.string() }),
      headerSchema: z.never(),
    },
  ];

  export const responseSchemasError = [];

  export const responseSchemas = [
    ...responseSchemasOk,
    ...responseSchemasError,
  ];

  export type ResponseBodyOk = z.infer<
    (typeof responseSchemasOk)[number]["bodySchema"]
  >;
  export type ResponseBodyError = z.infer<
    (typeof responseSchemasError)[number]["bodySchema"]
  >;
  export type ResponseBody = z.infer<
    (typeof responseSchemas)[number]["bodySchema"]
  >;

  export const requestParamSchemas = {
    id: z.number().int(),
  };

  export type Variables = RequestBody &
    OptionalUndefined<{
      id: z.infer<(typeof requestParamSchemas)["id"]>;
    }>;

  export const request = async <REQ_B = RequestBody, RES_B = ResponseBody>(
    axiosInstance: AxiosInstance,
    vars: Variables,
    config?: AxiosRequestConfig<undefined>,
  ) =>
    axiosInstance.request<REQ_B, AxiosResponse<RES_B, REQ_B>>({
      method: "get",
      url: `/user/${vars.id}`,
      headers: {},
      params: {},

      ...config,
    });

  export type AxiosConfig = AxiosRequestConfig<undefined>;

  export const requestSafe = async <
    REQ_B = RequestBody,
    RES_B_OK = ResponseBodyOk,
    RES_B_ERROR = ResponseBodyError,
  >(
    axiosInstance: AxiosInstance,
    vars: Variables,
    config?: AxiosConfig,
  ) =>
    safeifyRequest<REQ_B, RES_B_OK, RES_B_ERROR>(
      axiosInstance,
      vars,
      config,
      request,
    );
}

export namespace GetCookie {
  export const requestBodySchemas = {};
  export type RequestBody = {};

  export const responseSchemasOk = [
    {
      statusCode: "200",
      contentType: "text/plain",
      bodySchema: z.string(),
      headerSchema: z.never(),
    },
  ];

  export const responseSchemasError = [];

  export const responseSchemas = [
    ...responseSchemasOk,
    ...responseSchemasError,
  ];

  export type ResponseBodyOk = z.infer<
    (typeof responseSchemasOk)[number]["bodySchema"]
  >;
  export type ResponseBodyError = z.infer<
    (typeof responseSchemasError)[number]["bodySchema"]
  >;
  export type ResponseBody = z.infer<
    (typeof responseSchemas)[number]["bodySchema"]
  >;

  export const requestParamSchemas = {
    myRequiredCookie: z.number(),
    myOptionalCookie: z.string().optional(),
  };

  export type Variables = RequestBody &
    OptionalUndefined<{
      myRequiredCookie: z.infer<
        (typeof requestParamSchemas)["myRequiredCookie"]
      >;
      myOptionalCookie: z.infer<
        (typeof requestParamSchemas)["myOptionalCookie"]
      >;
    }>;

  export const request = async <REQ_B = RequestBody, RES_B = ResponseBody>(
    axiosInstance: AxiosInstance,
    vars: Variables,
    config?: AxiosRequestConfig<undefined>,
  ) =>
    axiosInstance.request<REQ_B, AxiosResponse<RES_B, REQ_B>>({
      method: "get",
      url: `/cookie`,
      headers: {},
      params: {},

      ...config,
    });

  export type AxiosConfig = AxiosRequestConfig<undefined>;

  export const requestSafe = async <
    REQ_B = RequestBody,
    RES_B_OK = ResponseBodyOk,
    RES_B_ERROR = ResponseBodyError,
  >(
    axiosInstance: AxiosInstance,
    vars: Variables,
    config?: AxiosConfig,
  ) =>
    safeifyRequest<REQ_B, RES_B_OK, RES_B_ERROR>(
      axiosInstance,
      vars,
      config,
      request,
    );
}

export namespace GetHeader {
  export const requestBodySchemas = {};
  export type RequestBody = {};

  export const responseSchemasOk = [
    {
      statusCode: "200",
      contentType: "text/plain",
      bodySchema: z.string(),
      headerSchema: z.never(),
    },
  ];

  export const responseSchemasError = [];

  export const responseSchemas = [
    ...responseSchemasOk,
    ...responseSchemasError,
  ];

  export type ResponseBodyOk = z.infer<
    (typeof responseSchemasOk)[number]["bodySchema"]
  >;
  export type ResponseBodyError = z.infer<
    (typeof responseSchemasError)[number]["bodySchema"]
  >;
  export type ResponseBody = z.infer<
    (typeof responseSchemas)[number]["bodySchema"]
  >;

  export const requestParamSchemas = {
    xMyRequiredHeader: z.number(),
    xMyOptionalHeader: z.string().optional(),
  };

  export type Variables = RequestBody &
    OptionalUndefined<{
      xMyRequiredHeader: z.infer<
        (typeof requestParamSchemas)["xMyRequiredHeader"]
      >;
      xMyOptionalHeader: z.infer<
        (typeof requestParamSchemas)["xMyOptionalHeader"]
      >;
    }>;

  export const request = async <REQ_B = RequestBody, RES_B = ResponseBody>(
    axiosInstance: AxiosInstance,
    vars: Variables,
    config?: AxiosRequestConfig<undefined>,
  ) =>
    axiosInstance.request<REQ_B, AxiosResponse<RES_B, REQ_B>>({
      method: "get",
      url: `/header`,
      headers: {
        "X-My-Required-Header": requestParamSchemas["xMyRequiredHeader"].parse(
          vars.xMyRequiredHeader,
          { path: ["request", "xMyRequiredHeader"] },
        ),
        "X-My-Optional-Header": requestParamSchemas["xMyOptionalHeader"].parse(
          vars.xMyOptionalHeader,
          { path: ["request", "xMyOptionalHeader"] },
        ),
      },
      params: {},

      ...config,
    });

  export type AxiosConfig = AxiosRequestConfig<undefined>;

  export const requestSafe = async <
    REQ_B = RequestBody,
    RES_B_OK = ResponseBodyOk,
    RES_B_ERROR = ResponseBodyError,
  >(
    axiosInstance: AxiosInstance,
    vars: Variables,
    config?: AxiosConfig,
  ) =>
    safeifyRequest<REQ_B, RES_B_OK, RES_B_ERROR>(
      axiosInstance,
      vars,
      config,
      request,
    );
}

export namespace GetQuery {
  export const requestBodySchemas = {};
  export type RequestBody = {};

  export const responseSchemasOk = [
    {
      statusCode: "200",
      contentType: "text/plain",
      bodySchema: z.string(),
      headerSchema: z.never(),
    },
  ];

  export const responseSchemasError = [];

  export const responseSchemas = [
    ...responseSchemasOk,
    ...responseSchemasError,
  ];

  export type ResponseBodyOk = z.infer<
    (typeof responseSchemasOk)[number]["bodySchema"]
  >;
  export type ResponseBodyError = z.infer<
    (typeof responseSchemasError)[number]["bodySchema"]
  >;
  export type ResponseBody = z.infer<
    (typeof responseSchemas)[number]["bodySchema"]
  >;

  export const requestParamSchemas = {
    a: z.number(),
    b: z.string().optional(),
  };

  export type Variables = RequestBody &
    OptionalUndefined<{
      a: z.infer<(typeof requestParamSchemas)["a"]>;
      b: z.infer<(typeof requestParamSchemas)["b"]>;
    }>;

  export const request = async <REQ_B = RequestBody, RES_B = ResponseBody>(
    axiosInstance: AxiosInstance,
    vars: Variables,
    config?: AxiosRequestConfig<undefined>,
  ) =>
    axiosInstance.request<REQ_B, AxiosResponse<RES_B, REQ_B>>({
      method: "get",
      url: `/query`,
      headers: {},
      params: {
        a: requestParamSchemas["a"].parse(vars.a, { path: ["request", "a"] }),
        b: requestParamSchemas["b"].parse(vars.b, { path: ["request", "b"] }),
      },

      ...config,
    });

  export type AxiosConfig = AxiosRequestConfig<undefined>;

  export const requestSafe = async <
    REQ_B = RequestBody,
    RES_B_OK = ResponseBodyOk,
    RES_B_ERROR = ResponseBodyError,
  >(
    axiosInstance: AxiosInstance,
    vars: Variables,
    config?: AxiosConfig,
  ) =>
    safeifyRequest<REQ_B, RES_B_OK, RES_B_ERROR>(
      axiosInstance,
      vars,
      config,
      request,
    );
}

export namespace GetError {
  export const requestBodySchemas = {};
  export type RequestBody = {};

  export const responseSchemasOk = [];

  export const responseSchemasError = [
    {
      statusCode: "500",
      contentType: "text/plain",
      bodySchema: z.string(),
      headerSchema: z.never(),
    },
  ];

  export const responseSchemas = [
    ...responseSchemasOk,
    ...responseSchemasError,
  ];

  export type ResponseBodyOk = z.infer<
    (typeof responseSchemasOk)[number]["bodySchema"]
  >;
  export type ResponseBodyError = z.infer<
    (typeof responseSchemasError)[number]["bodySchema"]
  >;
  export type ResponseBody = z.infer<
    (typeof responseSchemas)[number]["bodySchema"]
  >;

  export const requestParamSchemas = {};

  export type Variables = RequestBody & OptionalUndefined<{}>;

  export const request = async <REQ_B = RequestBody, RES_B = ResponseBody>(
    axiosInstance: AxiosInstance,
    vars: Variables,
    config?: AxiosRequestConfig<undefined>,
  ) =>
    axiosInstance.request<REQ_B, AxiosResponse<RES_B, REQ_B>>({
      method: "get",
      url: `/error`,
      headers: {},
      params: {},

      ...config,
    });

  export type AxiosConfig = AxiosRequestConfig<undefined>;

  export const requestSafe = async <
    REQ_B = RequestBody,
    RES_B_OK = ResponseBodyOk,
    RES_B_ERROR = ResponseBodyError,
  >(
    axiosInstance: AxiosInstance,
    vars: Variables,
    config?: AxiosConfig,
  ) =>
    safeifyRequest<REQ_B, RES_B_OK, RES_B_ERROR>(
      axiosInstance,
      vars,
      config,
      request,
    );
}

export class Client {
  public axiosInstance: AxiosInstance;
  constructor(axiosInstance?: AxiosInstance) {
    this.axiosInstance = axiosInstance ?? axios.create();
  }

  public async getUser(
    vars: GetUser.Variables,
    config?: AxiosRequestConfig<undefined>,
  ) {
    return GetUser.request(this.axiosInstance, vars, config);
  }

  public async getUserSafe(
    vars: GetUser.Variables,
    config?: AxiosRequestConfig<undefined>,
  ) {
    return GetUser.requestSafe(this.axiosInstance, vars, config);
  }

  public async postUser(
    vars: Omit<PostUser.Variables, "contentType">,
    config?: AxiosRequestConfig<Pick<PostUser.RequestBody, "body">>,
  ) {
    return PostUser.request(
      this.axiosInstance,
      { contentType: "application/json", ...vars },
      config,
    );
  }

  public async postUserSafe(
    vars: Omit<PostUser.Variables, "contentType">,
    config?: AxiosRequestConfig<Pick<PostUser.RequestBody, "body">>,
  ) {
    return PostUser.requestSafe(
      this.axiosInstance,
      { contentType: "application/json", ...vars },
      config,
    );
  }

  public async getUserId(
    vars: GetUserId.Variables,
    config?: AxiosRequestConfig<undefined>,
  ) {
    return GetUserId.request(this.axiosInstance, vars, config);
  }

  public async getUserIdSafe(
    vars: GetUserId.Variables,
    config?: AxiosRequestConfig<undefined>,
  ) {
    return GetUserId.requestSafe(this.axiosInstance, vars, config);
  }

  public async getCookie(
    vars: GetCookie.Variables,
    config?: AxiosRequestConfig<undefined>,
  ) {
    return GetCookie.request(this.axiosInstance, vars, config);
  }

  public async getCookieSafe(
    vars: GetCookie.Variables,
    config?: AxiosRequestConfig<undefined>,
  ) {
    return GetCookie.requestSafe(this.axiosInstance, vars, config);
  }

  public async getHeader(
    vars: GetHeader.Variables,
    config?: AxiosRequestConfig<undefined>,
  ) {
    return GetHeader.request(this.axiosInstance, vars, config);
  }

  public async getHeaderSafe(
    vars: GetHeader.Variables,
    config?: AxiosRequestConfig<undefined>,
  ) {
    return GetHeader.requestSafe(this.axiosInstance, vars, config);
  }

  public async getQuery(
    vars: GetQuery.Variables,
    config?: AxiosRequestConfig<undefined>,
  ) {
    return GetQuery.request(this.axiosInstance, vars, config);
  }

  public async getQuerySafe(
    vars: GetQuery.Variables,
    config?: AxiosRequestConfig<undefined>,
  ) {
    return GetQuery.requestSafe(this.axiosInstance, vars, config);
  }

  public async getError(
    vars: GetError.Variables,
    config?: AxiosRequestConfig<undefined>,
  ) {
    return GetError.request(this.axiosInstance, vars, config);
  }

  public async getErrorSafe(
    vars: GetError.Variables,
    config?: AxiosRequestConfig<undefined>,
  ) {
    return GetError.requestSafe(this.axiosInstance, vars, config);
  }
}

type UndefinedProps<T extends object> = {
  [K in keyof T as undefined extends T[K] ? K : never]?: T[K];
};

// Combine with rest of the reuiqred properties
type OptionalUndefined<T extends object> = UndefinedProps<T> &
  Omit<T, keyof UndefinedProps<T>>;

const safeifyRequest = async <REQ_B, RES_B_OK, RES_B_ERROR>(
  axiosInstance,
  vars,
  config,
  request: CallableFunction,
) => {
  const res = await request(axiosInstance, vars, {
    ...config,
    validateStatus: () => true,
  });
  return res.status >= 200 && res.status < 300
    ? {
        ok: res as unknown as AxiosResponse<RES_B_OK, REQ_B>,
        error: null,
        any: res as unknown as AxiosResponse<RES_B_OK, REQ_B>,
      }
    : {
        ok: null,
        error: res as unknown as AxiosResponse<RES_B_ERROR, REQ_B>,
        any: res as unknown as AxiosResponse<RES_B_ERROR, REQ_B>,
      };
};
