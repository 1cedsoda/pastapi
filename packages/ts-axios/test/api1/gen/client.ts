/*  ╔══════════════════════════════╗
/   ║ 🍝  Generated by Pastapi  🍝 ║
/   ║        Do not modify.        ║
/   ╚══════════════════════════════╝
/   
*/

import { z } from "zod";
import axios, { AxiosRequestConfig } from "axios";

export namespace GetUser {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {};
  export type FetchVariables = Body & {};

  export const fetch = async (
    {}: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/user`,
      headers: {},
      params: {},

      ...config,
    });
}

export namespace PostUser {
  export const bodySchemas = {
    "application/json": z.object({ id: z.number().int(), name: z.string() }),
  };
  export type Body = {
    body: z.infer<(typeof bodySchemas)["application/json"]>;
  };

  export const paramSchemas = {};
  export type FetchVariables = Body & {};

  export const fetch = async (
    { body }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/user`,
      headers: {
        "Content-Type": "application/json",
      },
      params: {},
      data: body,
      ...config,
    });
}

export namespace GetUserId {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {
    id: z.number().int(),
  };
  export type FetchVariables = Body & {
    id: z.infer<(typeof paramSchemas)["id"]>;
  };

  export const fetch = async (
    { id }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/user/${id}`,
      headers: {},
      params: {},

      ...config,
    });
}

export namespace GetCookie {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {
    myRequiredCookie: z.number(),
    myOptionalCookie: z.string().optional(),
  };
  export type FetchVariables = Body & {
    myRequiredCookie: z.infer<(typeof paramSchemas)["myRequiredCookie"]>;
    myOptionalCookie: z.infer<(typeof paramSchemas)["myOptionalCookie"]>;
  };

  export const fetch = async (
    { myRequiredCookie, myOptionalCookie }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/cookie`,
      headers: {},
      params: {},

      ...config,
    });
}

export namespace GetHeader {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {
    xMyRequiredHeader: z.number(),
    xMyOptionalHeader: z.string().optional(),
  };
  export type FetchVariables = Body & {
    xMyRequiredHeader: z.infer<(typeof paramSchemas)["xMyRequiredHeader"]>;
    xMyOptionalHeader: z.infer<(typeof paramSchemas)["xMyOptionalHeader"]>;
  };

  export const fetch = async (
    { xMyRequiredHeader, xMyOptionalHeader }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/header`,
      headers: {
        "x-my-required-header": xMyRequiredHeader,
        "x-my-optional-header": xMyOptionalHeader,
      },
      params: {},

      ...config,
    });
}

export namespace GetQuery {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {
    a: z.number(),
    b: z.string().optional(),
  };
  export type FetchVariables = Body & {
    a: z.infer<(typeof paramSchemas)["a"]>;
    b: z.infer<(typeof paramSchemas)["b"]>;
  };

  export const fetch = async (
    { a, b }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/query`,
      headers: {},
      params: {
        a: a,
        b: b,
      },

      ...config,
    });
}

export namespace GetError {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {};
  export type FetchVariables = Body & {};

  export const fetch = async (
    {}: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/error`,
      headers: {},
      params: {},

      ...config,
    });
}

export class Api {
  public staticConfig: AxiosRequestConfig;
  public dynamicConfig: (AxiosRequestConfig) => Promise<AxiosRequestConfig>;
  constructor(
    staticConfig?: AxiosRequestConfig,
    dynamicConfig?: (AxiosRequestConfig) => Promise<AxiosRequestConfig>,
  ) {
    this.staticConfig = staticConfig ?? {};
    this.dynamicConfig = dynamicConfig ?? (async (x: AxiosRequestConfig) => x);
  }

  private async applyStaticAndDynamicConfig(
    individualConfig?: AxiosRequestConfig,
  ) {
    return this.dynamicConfig({
      ...this.staticConfig,
      ...individualConfig,
    });
  }

  public async getUser(
    variables: GetUser.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return GetUser.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async postUser(
    variables: PostUser.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return PostUser.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async getUserId(
    variables: GetUserId.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return GetUserId.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async getCookie(
    variables: GetCookie.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return GetCookie.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async getHeader(
    variables: GetHeader.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return GetHeader.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async getQuery(
    variables: GetQuery.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return GetQuery.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async getError(
    variables: GetError.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return GetError.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }
}
