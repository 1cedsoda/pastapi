/*  ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
/   ‚ïë üçù  Generated by Pastapi  üçù ‚ïë
/   ‚ïë        Do not modify.        ‚ïë
/   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
/   
*/

import { z } from "zod";
import axios, { AxiosRequestConfig } from "axios";

export namespace UpdatePet {
  export const bodySchemas = {
    "application/json": z.object({
      id: z.number().int().optional(),
      name: z.string(),
      category: z
        .object({
          id: z.number().int().optional(),
          name: z.string().optional(),
        })
        .optional(),
      photoUrls: z.array(z.string()),
      tags: z
        .array(
          z.object({
            id: z.number().int().optional(),
            name: z.string().optional(),
          }),
        )
        .optional(),
      status: z.enum(["available", "pending", "sold"]).optional(),
    }),
    "application/xml": z.object({
      id: z.number().int().optional(),
      name: z.string(),
      category: z
        .object({
          id: z.number().int().optional(),
          name: z.string().optional(),
        })
        .optional(),
      photoUrls: z.array(z.string()),
      tags: z
        .array(
          z.object({
            id: z.number().int().optional(),
            name: z.string().optional(),
          }),
        )
        .optional(),
      status: z.enum(["available", "pending", "sold"]).optional(),
    }),
    "application/x-www-form-urlencoded": z.object({
      id: z.number().int().optional(),
      name: z.string(),
      category: z
        .object({
          id: z.number().int().optional(),
          name: z.string().optional(),
        })
        .optional(),
      photoUrls: z.array(z.string()),
      tags: z
        .array(
          z.object({
            id: z.number().int().optional(),
            name: z.string().optional(),
          }),
        )
        .optional(),
      status: z.enum(["available", "pending", "sold"]).optional(),
    }),
  };
  export type Body =
    | {
        applicationType: "application/json";
        body: z.infer<(typeof bodySchemas)["application/json"]>;
      }
    | {
        applicationType: "application/xml";
        body: z.infer<(typeof bodySchemas)["application/xml"]>;
      }
    | {
        applicationType: "application/x-www-form-urlencoded";
        body: z.infer<
          (typeof bodySchemas)["application/x-www-form-urlencoded"]
        >;
      };

  export const paramSchemas = {};
  export type FetchVariables = Body & {};

  export const fetch = async (
    { body, applicationType }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/pet`,
      headers: {
        "Content-Type": applicationType,
      },
      params: {},
      data: body,
      ...config,
    });
}

export namespace AddPet {
  export const bodySchemas = {
    "application/json": z.object({
      id: z.number().int().optional(),
      name: z.string(),
      category: z
        .object({
          id: z.number().int().optional(),
          name: z.string().optional(),
        })
        .optional(),
      photoUrls: z.array(z.string()),
      tags: z
        .array(
          z.object({
            id: z.number().int().optional(),
            name: z.string().optional(),
          }),
        )
        .optional(),
      status: z.enum(["available", "pending", "sold"]).optional(),
    }),
    "application/xml": z.object({
      id: z.number().int().optional(),
      name: z.string(),
      category: z
        .object({
          id: z.number().int().optional(),
          name: z.string().optional(),
        })
        .optional(),
      photoUrls: z.array(z.string()),
      tags: z
        .array(
          z.object({
            id: z.number().int().optional(),
            name: z.string().optional(),
          }),
        )
        .optional(),
      status: z.enum(["available", "pending", "sold"]).optional(),
    }),
    "application/x-www-form-urlencoded": z.object({
      id: z.number().int().optional(),
      name: z.string(),
      category: z
        .object({
          id: z.number().int().optional(),
          name: z.string().optional(),
        })
        .optional(),
      photoUrls: z.array(z.string()),
      tags: z
        .array(
          z.object({
            id: z.number().int().optional(),
            name: z.string().optional(),
          }),
        )
        .optional(),
      status: z.enum(["available", "pending", "sold"]).optional(),
    }),
  };
  export type Body =
    | {
        applicationType: "application/json";
        body: z.infer<(typeof bodySchemas)["application/json"]>;
      }
    | {
        applicationType: "application/xml";
        body: z.infer<(typeof bodySchemas)["application/xml"]>;
      }
    | {
        applicationType: "application/x-www-form-urlencoded";
        body: z.infer<
          (typeof bodySchemas)["application/x-www-form-urlencoded"]
        >;
      };

  export const paramSchemas = {};
  export type FetchVariables = Body & {};

  export const fetch = async (
    { body, applicationType }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/pet`,
      headers: {
        "Content-Type": applicationType,
      },
      params: {},
      data: body,
      ...config,
    });
}

export namespace FindPetsByStatus {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {
    status: z
      .enum(["available", "pending", "sold"])
      .default("available")
      .optional(),
  };
  export type FetchVariables = Body & {
    status: z.infer<(typeof paramSchemas)["status"]>;
  };

  export const fetch = async (
    { status }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/pet/findByStatus`,
      headers: {},
      params: {
        status: status,
      },

      ...config,
    });
}

export namespace FindPetsByTags {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {
    tags: z.array(z.string()).optional(),
  };
  export type FetchVariables = Body & {
    tags: z.infer<(typeof paramSchemas)["tags"]>;
  };

  export const fetch = async (
    { tags }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/pet/findByTags`,
      headers: {},
      params: {
        tags: tags,
      },

      ...config,
    });
}

export namespace GetPetById {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {
    petId: z.number().int(),
  };
  export type FetchVariables = Body & {
    petId: z.infer<(typeof paramSchemas)["petId"]>;
  };

  export const fetch = async (
    { petId }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/pet/${petId}`,
      headers: {},
      params: {},

      ...config,
    });
}

export namespace UpdatePetWithForm {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {
    petId: z.number().int(),
    name: z.string().optional(),
    status: z.string().optional(),
  };
  export type FetchVariables = Body & {
    petId: z.infer<(typeof paramSchemas)["petId"]>;
    name: z.infer<(typeof paramSchemas)["name"]>;
    status: z.infer<(typeof paramSchemas)["status"]>;
  };

  export const fetch = async (
    { petId, name, status }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/pet/${petId}`,
      headers: {},
      params: {
        name: name,
        status: status,
      },

      ...config,
    });
}

export namespace DeletePet {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {
    apiKey: z.string().optional(),
    petId: z.number().int(),
  };
  export type FetchVariables = Body & {
    apiKey: z.infer<(typeof paramSchemas)["apiKey"]>;
    petId: z.infer<(typeof paramSchemas)["petId"]>;
  };

  export const fetch = async (
    { apiKey, petId }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/pet/${petId}`,
      headers: {
        api_key: apiKey,
      },
      params: {},

      ...config,
    });
}

export namespace UploadFile {
  export const bodySchemas = {
    "application/octet-stream": z.string(),
  };
  export type Body = {
    body: z.infer<(typeof bodySchemas)["application/octet-stream"]>;
  };

  export const paramSchemas = {
    petId: z.number().int(),
    additionalMetadata: z.string().optional(),
  };
  export type FetchVariables = Body & {
    petId: z.infer<(typeof paramSchemas)["petId"]>;
    additionalMetadata: z.infer<(typeof paramSchemas)["additionalMetadata"]>;
  };

  export const fetch = async (
    { petId, additionalMetadata, body }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/pet/${petId}/uploadImage`,
      headers: {
        "Content-Type": "application/octet-stream",
      },
      params: {
        additionalMetadata: additionalMetadata,
      },
      data: body,
      ...config,
    });
}

export namespace GetInventory {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {};
  export type FetchVariables = Body & {};

  export const fetch = async (
    {}: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/store/inventory`,
      headers: {},
      params: {},

      ...config,
    });
}

export namespace PlaceOrder {
  export const bodySchemas = {
    "application/json": z.object({
      id: z.number().int().optional(),
      petId: z.number().int().optional(),
      quantity: z.number().int().optional(),
      shipDate: z.string().datetime().optional(),
      status: z.enum(["placed", "approved", "delivered"]).optional(),
      complete: z.boolean().optional(),
    }),
    "application/xml": z.object({
      id: z.number().int().optional(),
      petId: z.number().int().optional(),
      quantity: z.number().int().optional(),
      shipDate: z.string().datetime().optional(),
      status: z.enum(["placed", "approved", "delivered"]).optional(),
      complete: z.boolean().optional(),
    }),
    "application/x-www-form-urlencoded": z.object({
      id: z.number().int().optional(),
      petId: z.number().int().optional(),
      quantity: z.number().int().optional(),
      shipDate: z.string().datetime().optional(),
      status: z.enum(["placed", "approved", "delivered"]).optional(),
      complete: z.boolean().optional(),
    }),
  };
  export type Body =
    | {
        applicationType: "application/json";
        body: z.infer<(typeof bodySchemas)["application/json"]>;
      }
    | {
        applicationType: "application/xml";
        body: z.infer<(typeof bodySchemas)["application/xml"]>;
      }
    | {
        applicationType: "application/x-www-form-urlencoded";
        body: z.infer<
          (typeof bodySchemas)["application/x-www-form-urlencoded"]
        >;
      };

  export const paramSchemas = {};
  export type FetchVariables = Body & {};

  export const fetch = async (
    { body, applicationType }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/store/order`,
      headers: {
        "Content-Type": applicationType,
      },
      params: {},
      data: body,
      ...config,
    });
}

export namespace GetOrderById {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {
    orderId: z.number().int(),
  };
  export type FetchVariables = Body & {
    orderId: z.infer<(typeof paramSchemas)["orderId"]>;
  };

  export const fetch = async (
    { orderId }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/store/order/${orderId}`,
      headers: {},
      params: {},

      ...config,
    });
}

export namespace DeleteOrder {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {
    orderId: z.number().int(),
  };
  export type FetchVariables = Body & {
    orderId: z.infer<(typeof paramSchemas)["orderId"]>;
  };

  export const fetch = async (
    { orderId }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/store/order/${orderId}`,
      headers: {},
      params: {},

      ...config,
    });
}

export namespace CreateUser {
  export const bodySchemas = {
    "application/json": z.object({
      id: z.number().int().optional(),
      username: z.string().optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      email: z.string().optional(),
      password: z.string().optional(),
      phone: z.string().optional(),
      userStatus: z.number().int().optional(),
    }),
    "application/xml": z.object({
      id: z.number().int().optional(),
      username: z.string().optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      email: z.string().optional(),
      password: z.string().optional(),
      phone: z.string().optional(),
      userStatus: z.number().int().optional(),
    }),
    "application/x-www-form-urlencoded": z.object({
      id: z.number().int().optional(),
      username: z.string().optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      email: z.string().optional(),
      password: z.string().optional(),
      phone: z.string().optional(),
      userStatus: z.number().int().optional(),
    }),
  };
  export type Body =
    | {
        applicationType: "application/json";
        body: z.infer<(typeof bodySchemas)["application/json"]>;
      }
    | {
        applicationType: "application/xml";
        body: z.infer<(typeof bodySchemas)["application/xml"]>;
      }
    | {
        applicationType: "application/x-www-form-urlencoded";
        body: z.infer<
          (typeof bodySchemas)["application/x-www-form-urlencoded"]
        >;
      };

  export const paramSchemas = {};
  export type FetchVariables = Body & {};

  export const fetch = async (
    { body, applicationType }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/user`,
      headers: {
        "Content-Type": applicationType,
      },
      params: {},
      data: body,
      ...config,
    });
}

export namespace CreateUsersWithListInput {
  export const bodySchemas = {
    "application/json": z.array(
      z.object({
        id: z.number().int().optional(),
        username: z.string().optional(),
        firstName: z.string().optional(),
        lastName: z.string().optional(),
        email: z.string().optional(),
        password: z.string().optional(),
        phone: z.string().optional(),
        userStatus: z.number().int().optional(),
      }),
    ),
  };
  export type Body = {
    body: z.infer<(typeof bodySchemas)["application/json"]>;
  };

  export const paramSchemas = {};
  export type FetchVariables = Body & {};

  export const fetch = async (
    { body }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/user/createWithList`,
      headers: {
        "Content-Type": "application/json",
      },
      params: {},
      data: body,
      ...config,
    });
}

export namespace LoginUser {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {
    username: z.string().optional(),
    password: z.string().optional(),
  };
  export type FetchVariables = Body & {
    username: z.infer<(typeof paramSchemas)["username"]>;
    password: z.infer<(typeof paramSchemas)["password"]>;
  };

  export const fetch = async (
    { username, password }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/user/login`,
      headers: {},
      params: {
        username: username,
        password: password,
      },

      ...config,
    });
}

export namespace LogoutUser {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {};
  export type FetchVariables = Body & {};

  export const fetch = async (
    {}: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/user/logout`,
      headers: {},
      params: {},

      ...config,
    });
}

export namespace GetUserByName {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {
    username: z.string(),
  };
  export type FetchVariables = Body & {
    username: z.infer<(typeof paramSchemas)["username"]>;
  };

  export const fetch = async (
    { username }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/user/${username}`,
      headers: {},
      params: {},

      ...config,
    });
}

export namespace UpdateUser {
  export const bodySchemas = {
    "application/json": z.object({
      id: z.number().int().optional(),
      username: z.string().optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      email: z.string().optional(),
      password: z.string().optional(),
      phone: z.string().optional(),
      userStatus: z.number().int().optional(),
    }),
    "application/xml": z.object({
      id: z.number().int().optional(),
      username: z.string().optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      email: z.string().optional(),
      password: z.string().optional(),
      phone: z.string().optional(),
      userStatus: z.number().int().optional(),
    }),
    "application/x-www-form-urlencoded": z.object({
      id: z.number().int().optional(),
      username: z.string().optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      email: z.string().optional(),
      password: z.string().optional(),
      phone: z.string().optional(),
      userStatus: z.number().int().optional(),
    }),
  };
  export type Body =
    | {
        applicationType: "application/json";
        body: z.infer<(typeof bodySchemas)["application/json"]>;
      }
    | {
        applicationType: "application/xml";
        body: z.infer<(typeof bodySchemas)["application/xml"]>;
      }
    | {
        applicationType: "application/x-www-form-urlencoded";
        body: z.infer<
          (typeof bodySchemas)["application/x-www-form-urlencoded"]
        >;
      };

  export const paramSchemas = {
    username: z.string(),
  };
  export type FetchVariables = Body & {
    username: z.infer<(typeof paramSchemas)["username"]>;
  };

  export const fetch = async (
    { username, body, applicationType }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/user/${username}`,
      headers: {
        "Content-Type": applicationType,
      },
      params: {},
      data: body,
      ...config,
    });
}

export namespace DeleteUser {
  export const bodySchemas = {};
  export type Body = {};

  export const paramSchemas = {
    username: z.string(),
  };
  export type FetchVariables = Body & {
    username: z.infer<(typeof paramSchemas)["username"]>;
  };

  export const fetch = async (
    { username }: FetchVariables,
    config?: AxiosRequestConfig,
  ) =>
    axios({
      url: `/user/${username}`,
      headers: {},
      params: {},

      ...config,
    });
}

export class Api {
  public staticConfig: AxiosRequestConfig;
  public dynamicConfig: (AxiosRequestConfig) => Promise<AxiosRequestConfig>;
  constructor(
    staticConfig?: AxiosRequestConfig,
    dynamicConfig?: (AxiosRequestConfig) => Promise<AxiosRequestConfig>,
  ) {
    this.staticConfig = staticConfig ?? {};
    this.dynamicConfig = dynamicConfig ?? (async (x: AxiosRequestConfig) => x);
  }

  private async applyStaticAndDynamicConfig(
    individualConfig?: AxiosRequestConfig,
  ) {
    return this.dynamicConfig({
      ...this.staticConfig,
      ...individualConfig,
    });
  }

  public async updatePet(
    variables: UpdatePet.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return UpdatePet.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async addPet(
    variables: AddPet.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return AddPet.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async findPetsByStatus(
    variables: FindPetsByStatus.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return FindPetsByStatus.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async findPetsByTags(
    variables: FindPetsByTags.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return FindPetsByTags.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async getPetById(
    variables: GetPetById.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return GetPetById.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async updatePetWithForm(
    variables: UpdatePetWithForm.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return UpdatePetWithForm.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async deletePet(
    variables: DeletePet.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return DeletePet.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async uploadFile(
    variables: UploadFile.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return UploadFile.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async getInventory(
    variables: GetInventory.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return GetInventory.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async placeOrder(
    variables: PlaceOrder.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return PlaceOrder.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async getOrderById(
    variables: GetOrderById.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return GetOrderById.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async deleteOrder(
    variables: DeleteOrder.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return DeleteOrder.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async createUser(
    variables: CreateUser.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return CreateUser.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async createUsersWithListInput(
    variables: CreateUsersWithListInput.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return CreateUsersWithListInput.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async loginUser(
    variables: LoginUser.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return LoginUser.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async logoutUser(
    variables: LogoutUser.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return LogoutUser.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async getUserByName(
    variables: GetUserByName.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return GetUserByName.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async updateUser(
    variables: UpdateUser.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return UpdateUser.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }

  public async deleteUser(
    variables: DeleteUser.FetchVariables,
    config?: AxiosRequestConfig,
  ) {
    return DeleteUser.fetch(
      variables,
      await this.applyStaticAndDynamicConfig(config),
    );
  }
}
