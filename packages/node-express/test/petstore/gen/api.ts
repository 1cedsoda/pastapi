/*  ╔══════════════════════════════╗
/   ║ 🍝  Generated by Pastapi  🍝 ║
/   ║        Do not modify.        ║
/   ╚══════════════════════════════╝
/   
/   External Middleware Dependencies:
/   - body-parser to validate bodies
/   - cookie-parser to validate cookies
*/
import { Request, Response, Router } from "express";
import { z } from "zod";

export namespace UpdatePet {
  export const bodySchemas = {
    "application/json": z.object({
      id: z.number().int().optional(),
      name: z.string(),
      category: z
        .object({
          id: z.number().int().optional(),
          name: z.string().optional(),
        })
        .optional(),
      photoUrls: z.array(z.string()),
      tags: z
        .array(
          z.object({
            id: z.number().int().optional(),
            name: z.string().optional(),
          }),
        )
        .optional(),
      status: z.enum(["available", "pending", "sold"]).optional(),
    }),
    "application/xml": z.object({
      id: z.number().int().optional(),
      name: z.string(),
      category: z
        .object({
          id: z.number().int().optional(),
          name: z.string().optional(),
        })
        .optional(),
      photoUrls: z.array(z.string()),
      tags: z
        .array(
          z.object({
            id: z.number().int().optional(),
            name: z.string().optional(),
          }),
        )
        .optional(),
      status: z.enum(["available", "pending", "sold"]).optional(),
    }),
    "application/x-www-form-urlencoded": z.object({
      id: z.number().int().optional(),
      name: z.string(),
      category: z
        .object({
          id: z.number().int().optional(),
          name: z.string().optional(),
        })
        .optional(),
      photoUrls: z.array(z.string()),
      tags: z
        .array(
          z.object({
            id: z.number().int().optional(),
            name: z.string().optional(),
          }),
        )
        .optional(),
      status: z.enum(["available", "pending", "sold"]).optional(),
    }),
  };
  export type ParsedBody = {
    "application/json":
      | z.infer<(typeof bodySchemas)["application/json"]>
      | undefined;
    "application/xml":
      | z.infer<(typeof bodySchemas)["application/xml"]>
      | undefined;
    "application/x-www-form-urlencoded":
      | z.infer<(typeof bodySchemas)["application/x-www-form-urlencoded"]>
      | undefined;
  };
  export const parsedContentTypeSchema = z.enum([
    "application/json",
    "application/xml",
    "application/x-www-form-urlencoded",
  ]);
  export const paramSchemas = {};
  export type ParamsParsed = {};
  export type Parsed = {
    contentType: keyof ParsedBody;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = parsedContentTypeSchema.parse(
      req.headers["content-type"],
      { path: ["header", "Content-Type"] },
    );

    const parsed: Parsed = {
      contentType,
      body: {
        "application/json":
          contentType === "application/json"
            ? bodySchemas["application/json"]?.parse(req.body, {
                path: ["body"],
              })
            : undefined,
        "application/xml":
          contentType === "application/xml"
            ? bodySchemas["application/xml"]?.parse(req.body, {
                path: ["body"],
              })
            : undefined,
        "application/x-www-form-urlencoded":
          contentType === "application/x-www-form-urlencoded"
            ? bodySchemas["application/x-www-form-urlencoded"]?.parse(
                req.body,
                { path: ["body"] },
              )
            : undefined,
      },
      params: {},
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace AddPet {
  export const bodySchemas = {
    "application/json": z.object({
      id: z.number().int().optional(),
      name: z.string(),
      category: z
        .object({
          id: z.number().int().optional(),
          name: z.string().optional(),
        })
        .optional(),
      photoUrls: z.array(z.string()),
      tags: z
        .array(
          z.object({
            id: z.number().int().optional(),
            name: z.string().optional(),
          }),
        )
        .optional(),
      status: z.enum(["available", "pending", "sold"]).optional(),
    }),
    "application/xml": z.object({
      id: z.number().int().optional(),
      name: z.string(),
      category: z
        .object({
          id: z.number().int().optional(),
          name: z.string().optional(),
        })
        .optional(),
      photoUrls: z.array(z.string()),
      tags: z
        .array(
          z.object({
            id: z.number().int().optional(),
            name: z.string().optional(),
          }),
        )
        .optional(),
      status: z.enum(["available", "pending", "sold"]).optional(),
    }),
    "application/x-www-form-urlencoded": z.object({
      id: z.number().int().optional(),
      name: z.string(),
      category: z
        .object({
          id: z.number().int().optional(),
          name: z.string().optional(),
        })
        .optional(),
      photoUrls: z.array(z.string()),
      tags: z
        .array(
          z.object({
            id: z.number().int().optional(),
            name: z.string().optional(),
          }),
        )
        .optional(),
      status: z.enum(["available", "pending", "sold"]).optional(),
    }),
  };
  export type ParsedBody = {
    "application/json":
      | z.infer<(typeof bodySchemas)["application/json"]>
      | undefined;
    "application/xml":
      | z.infer<(typeof bodySchemas)["application/xml"]>
      | undefined;
    "application/x-www-form-urlencoded":
      | z.infer<(typeof bodySchemas)["application/x-www-form-urlencoded"]>
      | undefined;
  };
  export const parsedContentTypeSchema = z.enum([
    "application/json",
    "application/xml",
    "application/x-www-form-urlencoded",
  ]);
  export const paramSchemas = {};
  export type ParamsParsed = {};
  export type Parsed = {
    contentType: keyof ParsedBody;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = parsedContentTypeSchema.parse(
      req.headers["content-type"],
      { path: ["header", "Content-Type"] },
    );

    const parsed: Parsed = {
      contentType,
      body: {
        "application/json":
          contentType === "application/json"
            ? bodySchemas["application/json"]?.parse(req.body, {
                path: ["body"],
              })
            : undefined,
        "application/xml":
          contentType === "application/xml"
            ? bodySchemas["application/xml"]?.parse(req.body, {
                path: ["body"],
              })
            : undefined,
        "application/x-www-form-urlencoded":
          contentType === "application/x-www-form-urlencoded"
            ? bodySchemas["application/x-www-form-urlencoded"]?.parse(
                req.body,
                { path: ["body"] },
              )
            : undefined,
      },
      params: {},
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace FindPetsByStatus {
  export const bodySchemas = {};
  export type ParsedBody = {};
  export const paramSchemas = {
    status: z
      .enum(["available", "pending", "sold"])
      .default("available")
      .optional(),
  };
  export type ParamsParsed = {
    status: z.infer<(typeof paramSchemas)["status"]>;
  };
  export type Parsed = {
    contentType: undefined;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = undefined;

    const parsed: Parsed = {
      contentType,
      body: {},
      params: {
        status: paramSchemas.status?.parse(
          autoCastQuery(paramSchemas.status, req.query["status"]),
          { path: ["query", "status"] },
        ),
      },
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace FindPetsByTags {
  export const bodySchemas = {};
  export type ParsedBody = {};
  export const paramSchemas = {
    tags: z.array(z.string()).optional(),
  };
  export type ParamsParsed = {
    tags: z.infer<(typeof paramSchemas)["tags"]>;
  };
  export type Parsed = {
    contentType: undefined;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = undefined;

    const parsed: Parsed = {
      contentType,
      body: {},
      params: {
        tags: paramSchemas.tags?.parse(
          autoCastQuery(paramSchemas.tags, req.query["tags"]),
          { path: ["query", "tags"] },
        ),
      },
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace GetPetById {
  export const bodySchemas = {};
  export type ParsedBody = {};
  export const paramSchemas = {
    petId: z.number().int(),
  };
  export type ParamsParsed = {
    petId: z.infer<(typeof paramSchemas)["petId"]>;
  };
  export type Parsed = {
    contentType: undefined;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = undefined;

    const parsed: Parsed = {
      contentType,
      body: {},
      params: {
        petId: paramSchemas.petId?.parse(
          autoCastString(paramSchemas.petId, req.params["petId"]),
          { path: ["path", "petId"] },
        ),
      },
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace UpdatePetWithForm {
  export const bodySchemas = {};
  export type ParsedBody = {};
  export const paramSchemas = {
    petId: z.number().int(),
    name: z.string().optional(),
    status: z.string().optional(),
  };
  export type ParamsParsed = {
    petId: z.infer<(typeof paramSchemas)["petId"]>;
    name: z.infer<(typeof paramSchemas)["name"]>;
    status: z.infer<(typeof paramSchemas)["status"]>;
  };
  export type Parsed = {
    contentType: undefined;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = undefined;

    const parsed: Parsed = {
      contentType,
      body: {},
      params: {
        petId: paramSchemas.petId?.parse(
          autoCastString(paramSchemas.petId, req.params["petId"]),
          { path: ["path", "petId"] },
        ),
        name: paramSchemas.name?.parse(
          autoCastQuery(paramSchemas.name, req.query["name"]),
          { path: ["query", "name"] },
        ),
        status: paramSchemas.status?.parse(
          autoCastQuery(paramSchemas.status, req.query["status"]),
          { path: ["query", "status"] },
        ),
      },
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace DeletePet {
  export const bodySchemas = {};
  export type ParsedBody = {};
  export const paramSchemas = {
    apiKey: z.string().optional(),
    petId: z.number().int(),
  };
  export type ParamsParsed = {
    apiKey: z.infer<(typeof paramSchemas)["apiKey"]>;
    petId: z.infer<(typeof paramSchemas)["petId"]>;
  };
  export type Parsed = {
    contentType: undefined;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = undefined;

    const parsed: Parsed = {
      contentType,
      body: {},
      params: {
        apiKey: paramSchemas.apiKey?.parse(
          autoCastString(paramSchemas.apiKey, single(req.headers["api_key"])),
          { path: ["header", "api_key"] },
        ),
        petId: paramSchemas.petId?.parse(
          autoCastString(paramSchemas.petId, req.params["petId"]),
          { path: ["path", "petId"] },
        ),
      },
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace UploadFile {
  export const bodySchemas = {
    "application/octet-stream": z.string(),
  };
  export type ParsedBody = {
    "application/octet-stream":
      | z.infer<(typeof bodySchemas)["application/octet-stream"]>
      | undefined;
  };
  export const parsedContentTypeSchema = z.enum(["application/octet-stream"]);
  export const paramSchemas = {
    petId: z.number().int(),
    additionalMetadata: z.string().optional(),
  };
  export type ParamsParsed = {
    petId: z.infer<(typeof paramSchemas)["petId"]>;
    additionalMetadata: z.infer<(typeof paramSchemas)["additionalMetadata"]>;
  };
  export type Parsed = {
    contentType: keyof ParsedBody;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = parsedContentTypeSchema.parse(
      req.headers["content-type"],
      { path: ["header", "Content-Type"] },
    );

    const parsed: Parsed = {
      contentType,
      body: {
        "application/octet-stream":
          contentType === "application/octet-stream"
            ? bodySchemas["application/octet-stream"]?.parse(req.body, {
                path: ["body"],
              })
            : undefined,
      },
      params: {
        petId: paramSchemas.petId?.parse(
          autoCastString(paramSchemas.petId, req.params["petId"]),
          { path: ["path", "petId"] },
        ),
        additionalMetadata: paramSchemas.additionalMetadata?.parse(
          autoCastQuery(
            paramSchemas.additionalMetadata,
            req.query["additionalMetadata"],
          ),
          { path: ["query", "additionalMetadata"] },
        ),
      },
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace GetInventory {
  export const bodySchemas = {};
  export type ParsedBody = {};
  export const paramSchemas = {};
  export type ParamsParsed = {};
  export type Parsed = {
    contentType: undefined;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = undefined;

    const parsed: Parsed = {
      contentType,
      body: {},
      params: {},
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace PlaceOrder {
  export const bodySchemas = {
    "application/json": z.object({
      id: z.number().int().optional(),
      petId: z.number().int().optional(),
      quantity: z.number().int().optional(),
      shipDate: z.string().datetime().optional(),
      status: z.enum(["placed", "approved", "delivered"]).optional(),
      complete: z.boolean().optional(),
    }),
    "application/xml": z.object({
      id: z.number().int().optional(),
      petId: z.number().int().optional(),
      quantity: z.number().int().optional(),
      shipDate: z.string().datetime().optional(),
      status: z.enum(["placed", "approved", "delivered"]).optional(),
      complete: z.boolean().optional(),
    }),
    "application/x-www-form-urlencoded": z.object({
      id: z.number().int().optional(),
      petId: z.number().int().optional(),
      quantity: z.number().int().optional(),
      shipDate: z.string().datetime().optional(),
      status: z.enum(["placed", "approved", "delivered"]).optional(),
      complete: z.boolean().optional(),
    }),
  };
  export type ParsedBody = {
    "application/json":
      | z.infer<(typeof bodySchemas)["application/json"]>
      | undefined;
    "application/xml":
      | z.infer<(typeof bodySchemas)["application/xml"]>
      | undefined;
    "application/x-www-form-urlencoded":
      | z.infer<(typeof bodySchemas)["application/x-www-form-urlencoded"]>
      | undefined;
  };
  export const parsedContentTypeSchema = z.enum([
    "application/json",
    "application/xml",
    "application/x-www-form-urlencoded",
  ]);
  export const paramSchemas = {};
  export type ParamsParsed = {};
  export type Parsed = {
    contentType: keyof ParsedBody;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = parsedContentTypeSchema.parse(
      req.headers["content-type"],
      { path: ["header", "Content-Type"] },
    );

    const parsed: Parsed = {
      contentType,
      body: {
        "application/json":
          contentType === "application/json"
            ? bodySchemas["application/json"]?.parse(req.body, {
                path: ["body"],
              })
            : undefined,
        "application/xml":
          contentType === "application/xml"
            ? bodySchemas["application/xml"]?.parse(req.body, {
                path: ["body"],
              })
            : undefined,
        "application/x-www-form-urlencoded":
          contentType === "application/x-www-form-urlencoded"
            ? bodySchemas["application/x-www-form-urlencoded"]?.parse(
                req.body,
                { path: ["body"] },
              )
            : undefined,
      },
      params: {},
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace GetOrderById {
  export const bodySchemas = {};
  export type ParsedBody = {};
  export const paramSchemas = {
    orderId: z.number().int(),
  };
  export type ParamsParsed = {
    orderId: z.infer<(typeof paramSchemas)["orderId"]>;
  };
  export type Parsed = {
    contentType: undefined;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = undefined;

    const parsed: Parsed = {
      contentType,
      body: {},
      params: {
        orderId: paramSchemas.orderId?.parse(
          autoCastString(paramSchemas.orderId, req.params["orderId"]),
          { path: ["path", "orderId"] },
        ),
      },
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace DeleteOrder {
  export const bodySchemas = {};
  export type ParsedBody = {};
  export const paramSchemas = {
    orderId: z.number().int(),
  };
  export type ParamsParsed = {
    orderId: z.infer<(typeof paramSchemas)["orderId"]>;
  };
  export type Parsed = {
    contentType: undefined;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = undefined;

    const parsed: Parsed = {
      contentType,
      body: {},
      params: {
        orderId: paramSchemas.orderId?.parse(
          autoCastString(paramSchemas.orderId, req.params["orderId"]),
          { path: ["path", "orderId"] },
        ),
      },
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace CreateUser {
  export const bodySchemas = {
    "application/json": z.object({
      id: z.number().int().optional(),
      username: z.string().optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      email: z.string().optional(),
      password: z.string().optional(),
      phone: z.string().optional(),
      userStatus: z.number().int().optional(),
    }),
    "application/xml": z.object({
      id: z.number().int().optional(),
      username: z.string().optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      email: z.string().optional(),
      password: z.string().optional(),
      phone: z.string().optional(),
      userStatus: z.number().int().optional(),
    }),
    "application/x-www-form-urlencoded": z.object({
      id: z.number().int().optional(),
      username: z.string().optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      email: z.string().optional(),
      password: z.string().optional(),
      phone: z.string().optional(),
      userStatus: z.number().int().optional(),
    }),
  };
  export type ParsedBody = {
    "application/json":
      | z.infer<(typeof bodySchemas)["application/json"]>
      | undefined;
    "application/xml":
      | z.infer<(typeof bodySchemas)["application/xml"]>
      | undefined;
    "application/x-www-form-urlencoded":
      | z.infer<(typeof bodySchemas)["application/x-www-form-urlencoded"]>
      | undefined;
  };
  export const parsedContentTypeSchema = z.enum([
    "application/json",
    "application/xml",
    "application/x-www-form-urlencoded",
  ]);
  export const paramSchemas = {};
  export type ParamsParsed = {};
  export type Parsed = {
    contentType: keyof ParsedBody;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = parsedContentTypeSchema.parse(
      req.headers["content-type"],
      { path: ["header", "Content-Type"] },
    );

    const parsed: Parsed = {
      contentType,
      body: {
        "application/json":
          contentType === "application/json"
            ? bodySchemas["application/json"]?.parse(req.body, {
                path: ["body"],
              })
            : undefined,
        "application/xml":
          contentType === "application/xml"
            ? bodySchemas["application/xml"]?.parse(req.body, {
                path: ["body"],
              })
            : undefined,
        "application/x-www-form-urlencoded":
          contentType === "application/x-www-form-urlencoded"
            ? bodySchemas["application/x-www-form-urlencoded"]?.parse(
                req.body,
                { path: ["body"] },
              )
            : undefined,
      },
      params: {},
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace CreateUsersWithListInput {
  export const bodySchemas = {
    "application/json": z.array(
      z.object({
        id: z.number().int().optional(),
        username: z.string().optional(),
        firstName: z.string().optional(),
        lastName: z.string().optional(),
        email: z.string().optional(),
        password: z.string().optional(),
        phone: z.string().optional(),
        userStatus: z.number().int().optional(),
      }),
    ),
  };
  export type ParsedBody = {
    "application/json":
      | z.infer<(typeof bodySchemas)["application/json"]>
      | undefined;
  };
  export const parsedContentTypeSchema = z.enum(["application/json"]);
  export const paramSchemas = {};
  export type ParamsParsed = {};
  export type Parsed = {
    contentType: keyof ParsedBody;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = parsedContentTypeSchema.parse(
      req.headers["content-type"],
      { path: ["header", "Content-Type"] },
    );

    const parsed: Parsed = {
      contentType,
      body: {
        "application/json":
          contentType === "application/json"
            ? bodySchemas["application/json"]?.parse(req.body, {
                path: ["body"],
              })
            : undefined,
      },
      params: {},
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace LoginUser {
  export const bodySchemas = {};
  export type ParsedBody = {};
  export const paramSchemas = {
    username: z.string().optional(),
    password: z.string().optional(),
  };
  export type ParamsParsed = {
    username: z.infer<(typeof paramSchemas)["username"]>;
    password: z.infer<(typeof paramSchemas)["password"]>;
  };
  export type Parsed = {
    contentType: undefined;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = undefined;

    const parsed: Parsed = {
      contentType,
      body: {},
      params: {
        username: paramSchemas.username?.parse(
          autoCastQuery(paramSchemas.username, req.query["username"]),
          { path: ["query", "username"] },
        ),
        password: paramSchemas.password?.parse(
          autoCastQuery(paramSchemas.password, req.query["password"]),
          { path: ["query", "password"] },
        ),
      },
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace LogoutUser {
  export const bodySchemas = {};
  export type ParsedBody = {};
  export const paramSchemas = {};
  export type ParamsParsed = {};
  export type Parsed = {
    contentType: undefined;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = undefined;

    const parsed: Parsed = {
      contentType,
      body: {},
      params: {},
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace GetUserByName {
  export const bodySchemas = {};
  export type ParsedBody = {};
  export const paramSchemas = {
    username: z.string(),
  };
  export type ParamsParsed = {
    username: z.infer<(typeof paramSchemas)["username"]>;
  };
  export type Parsed = {
    contentType: undefined;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = undefined;

    const parsed: Parsed = {
      contentType,
      body: {},
      params: {
        username: paramSchemas.username?.parse(
          autoCastString(paramSchemas.username, req.params["username"]),
          { path: ["path", "username"] },
        ),
      },
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace UpdateUser {
  export const bodySchemas = {
    "application/json": z.object({
      id: z.number().int().optional(),
      username: z.string().optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      email: z.string().optional(),
      password: z.string().optional(),
      phone: z.string().optional(),
      userStatus: z.number().int().optional(),
    }),
    "application/xml": z.object({
      id: z.number().int().optional(),
      username: z.string().optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      email: z.string().optional(),
      password: z.string().optional(),
      phone: z.string().optional(),
      userStatus: z.number().int().optional(),
    }),
    "application/x-www-form-urlencoded": z.object({
      id: z.number().int().optional(),
      username: z.string().optional(),
      firstName: z.string().optional(),
      lastName: z.string().optional(),
      email: z.string().optional(),
      password: z.string().optional(),
      phone: z.string().optional(),
      userStatus: z.number().int().optional(),
    }),
  };
  export type ParsedBody = {
    "application/json":
      | z.infer<(typeof bodySchemas)["application/json"]>
      | undefined;
    "application/xml":
      | z.infer<(typeof bodySchemas)["application/xml"]>
      | undefined;
    "application/x-www-form-urlencoded":
      | z.infer<(typeof bodySchemas)["application/x-www-form-urlencoded"]>
      | undefined;
  };
  export const parsedContentTypeSchema = z.enum([
    "application/json",
    "application/xml",
    "application/x-www-form-urlencoded",
  ]);
  export const paramSchemas = {
    username: z.string(),
  };
  export type ParamsParsed = {
    username: z.infer<(typeof paramSchemas)["username"]>;
  };
  export type Parsed = {
    contentType: keyof ParsedBody;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = parsedContentTypeSchema.parse(
      req.headers["content-type"],
      { path: ["header", "Content-Type"] },
    );

    const parsed: Parsed = {
      contentType,
      body: {
        "application/json":
          contentType === "application/json"
            ? bodySchemas["application/json"]?.parse(req.body, {
                path: ["body"],
              })
            : undefined,
        "application/xml":
          contentType === "application/xml"
            ? bodySchemas["application/xml"]?.parse(req.body, {
                path: ["body"],
              })
            : undefined,
        "application/x-www-form-urlencoded":
          contentType === "application/x-www-form-urlencoded"
            ? bodySchemas["application/x-www-form-urlencoded"]?.parse(
                req.body,
                { path: ["body"] },
              )
            : undefined,
      },
      params: {
        username: paramSchemas.username?.parse(
          autoCastString(paramSchemas.username, req.params["username"]),
          { path: ["path", "username"] },
        ),
      },
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export namespace DeleteUser {
  export const bodySchemas = {};
  export type ParsedBody = {};
  export const paramSchemas = {
    username: z.string(),
  };
  export type ParamsParsed = {
    username: z.infer<(typeof paramSchemas)["username"]>;
  };
  export type Parsed = {
    contentType: undefined;
    body: ParsedBody;
    params: ParamsParsed;
  };
  export type Handler = (
    req: Request,
    res: Response,
    parsed: Parsed,
  ) => Promise<void>;

  export const parse = (req: Request): Parsed => {
    const contentType = undefined;

    const parsed: Parsed = {
      contentType,
      body: {},
      params: {
        username: paramSchemas.username?.parse(
          autoCastString(paramSchemas.username, req.params["username"]),
          { path: ["path", "username"] },
        ),
      },
    };

    return parsed;
  };

  export const createRouter = (handler: Handler | undefined): Router => {
    const router = Router({ mergeParams: true });
    router.use(async (req, res, next) => {
      let parsed: Parsed;
      try {
        parsed = parse(req);
      } catch (e) {
        if (e instanceof z.ZodError) res.status(422).send(e.issues);
        else res.status(500).send(e);
        return next();
      }
      if (handler !== undefined)
        handler(req, res, parsed).catch((e) => next(e));
      next();
    });
    return router;
  };
}

export type PastapiHandlers = {
  updatePet?: UpdatePet.Handler | undefined;
  addPet?: AddPet.Handler | undefined;
  findPetsByStatus?: FindPetsByStatus.Handler | undefined;
  findPetsByTags?: FindPetsByTags.Handler | undefined;
  getPetById?: GetPetById.Handler | undefined;
  updatePetWithForm?: UpdatePetWithForm.Handler | undefined;
  deletePet?: DeletePet.Handler | undefined;
  uploadFile?: UploadFile.Handler | undefined;
  getInventory?: GetInventory.Handler | undefined;
  placeOrder?: PlaceOrder.Handler | undefined;
  getOrderById?: GetOrderById.Handler | undefined;
  deleteOrder?: DeleteOrder.Handler | undefined;
  createUser?: CreateUser.Handler | undefined;
  createUsersWithListInput?: CreateUsersWithListInput.Handler | undefined;
  loginUser?: LoginUser.Handler | undefined;
  logoutUser?: LogoutUser.Handler | undefined;
  getUserByName?: GetUserByName.Handler | undefined;
  updateUser?: UpdateUser.Handler | undefined;
  deleteUser?: DeleteUser.Handler | undefined;
};

export function createRouter(handlers: PastapiHandlers): Router {
  const router = Router();

  router.put("/pet", UpdatePet.createRouter(handlers.updatePet));

  router.post("/pet", AddPet.createRouter(handlers.addPet));

  router.get(
    "/pet/findByStatus",
    FindPetsByStatus.createRouter(handlers.findPetsByStatus),
  );

  router.get(
    "/pet/findByTags",
    FindPetsByTags.createRouter(handlers.findPetsByTags),
  );

  router.get("/pet/:petId", GetPetById.createRouter(handlers.getPetById));

  router.post(
    "/pet/:petId",
    UpdatePetWithForm.createRouter(handlers.updatePetWithForm),
  );

  router.delete("/pet/:petId", DeletePet.createRouter(handlers.deletePet));

  router.post(
    "/pet/:petId/uploadImage",
    UploadFile.createRouter(handlers.uploadFile),
  );

  router.get(
    "/store/inventory",
    GetInventory.createRouter(handlers.getInventory),
  );

  router.post("/store/order", PlaceOrder.createRouter(handlers.placeOrder));

  router.get(
    "/store/order/:orderId",
    GetOrderById.createRouter(handlers.getOrderById),
  );

  router.delete(
    "/store/order/:orderId",
    DeleteOrder.createRouter(handlers.deleteOrder),
  );

  router.post("/user", CreateUser.createRouter(handlers.createUser));

  router.post(
    "/user/createWithList",
    CreateUsersWithListInput.createRouter(handlers.createUsersWithListInput),
  );

  router.get("/user/login", LoginUser.createRouter(handlers.loginUser));

  router.get("/user/logout", LogoutUser.createRouter(handlers.logoutUser));

  router.get(
    "/user/:username",
    GetUserByName.createRouter(handlers.getUserByName),
  );

  router.put("/user/:username", UpdateUser.createRouter(handlers.updateUser));

  router.delete(
    "/user/:username",
    DeleteUser.createRouter(handlers.deleteUser),
  );

  return router;
}

export function tryAutoCastString(
  schema: z.ZodTypeAny,
  value: string | undefined,
): any | undefined {
  if (value === undefined) {
    return undefined;
  }
  if (schema instanceof z.ZodNumber) {
    if (schema._def.checks.map((c) => c.kind).includes("int")) {
      const casted = parseInt(value);
      return !isNaN(casted) ? casted : undefined;
    } else {
      const casted = parseFloat(value);
      return !isNaN(casted) ? casted : undefined;
    }
  } else if ((schema as any) instanceof z.ZodBoolean) {
    if (value === "true") {
      return true;
    } else if (value === "false") {
      return false;
    } else {
      return undefined;
    }
  }
}

export function autoCastString(
  schema: z.ZodTypeAny,
  value: string | undefined,
): any {
  return tryAutoCastString(schema, value) ?? value;
}

export function autoCastQuery(schema: z.ZodTypeAny, value: any): any {
  if (typeof value === "string") {
    return autoCastString(schema, value);
  }
  return value as any;
}

export function single<T>(input: T | T[]): T {
  return Array.isArray(input) ? input[0] : input;
}

export function keysInclude<T extends object>(
  obj: T,
  key: keyof any,
): key is keyof T {
  return Object.keys(obj).indexOf(key as string) !== -1;
}
